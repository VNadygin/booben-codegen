{"version":3,"sources":["../lib/writeFiles.js"],"names":["path","require","thenifyAll","fsFunctions","isDirectory","fs","stat","stats","writeRecursive","basePath","files","fileNames","Object","keys","i","length","fileName","file","filePath","join","type","mkdir","content","Buffer","writeFile","Error","writeFiles","outputDir","withCallback","module","exports"],"mappings":"AAAA;;;;AAIA;;;;AAEA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,aAAaD,QAAQ,aAAR,CAAnB;;AAEA;;;;AAIA,IAAME,cAAc,CAAC,MAAD,EAAS,OAAT,EAAkB,WAAlB,CAApB;;AAEA;;;;;;AAMA,IAAMC;AAAA,qEAAc,iBAAOC,EAAP,EAAWL,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACEK,GAAGC,IAAH,CAAQN,IAAR,CADF;;AAAA;AACZO,iBADY;AAAA,6CAEXA,MAAMH,WAAN,EAFW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAKA;;;;;;;AAOA,IAAMI;AAAA,sEAAiB,kBAAOH,EAAP,EAAWI,QAAX,EAAqBC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,qBADe,GACHC,OAAOC,IAAP,CAAYH,KAAZ,CADG;AAGZI,aAHY,GAGR,CAHQ;;AAAA;AAAA,kBAGLA,IAAIH,UAAUI,MAHT;AAAA;AAAA;AAAA;;AAIbC,oBAJa,GAIFL,UAAUG,CAAV,CAJE;AAKbG,gBALa,GAKNP,MAAMM,QAAN,CALM;AAMbE,oBANa,GAMFlB,KAAKmB,IAAL,CAAUV,QAAV,EAAoBO,QAApB,CANE;;AAAA,kBAQfC,KAAKG,IAAL,KAAc,KARC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASXf,GAAGgB,KAAH,CAASH,QAAT,CATW;;AAAA;AAAA;AAAA,mBAUXV,eAAeH,EAAf,EAAmBa,QAAnB,EAA6BD,KAAKK,OAAlC,CAVW;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAWRL,KAAKG,IAAL,KAAc,MAXN;AAAA;AAAA;AAAA;;AAAA,kBAYb,OAAOH,KAAKK,OAAZ,KAAwB,QAAxB,IAAoCL,KAAKK,OAAL,YAAwBC,MAZ/C;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAaTlB,GAAGmB,SAAH,CAAaN,QAAb,EAAuBD,KAAKK,OAA5B,CAbS;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAeT,IAAIG,KAAJ,yCAAgDP,QAAhD,CAfS;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAkBX,IAAIO,KAAJ,qCAA4CR,KAAKG,IAAjD,CAlBW;;AAAA;AAGiBN,eAHjB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAuBA;;;;;;;AAOA,IAAMY;AAAA,sEAAa,kBAAOhB,KAAP,EAAciB,SAAd;AAAA,QAAyBtB,EAAzB,uEAA8B,IAA9B;AAAA;AAAA;AAAA;AAAA;AACjBA,iBAAKH,WAAW0B,YAAX,CAAwBvB,MAAMJ,QAAQ,IAAR,CAA9B,EAA6C,EAA7C,EAAiDE,WAAjD,CAAL;;AADiB;AAAA,mBAGNC,YAAYC,EAAZ,EAAgBsB,SAAhB,CAHM;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAIT,IAAIF,KAAJ,kBAAyBE,SAAzB,yBAJS;;AAAA;AAAA;AAAA,mBAOXnB,eAAeH,EAAf,EAAmBsB,SAAnB,EAA8BjB,KAA9B,CAPW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAUAmB,OAAOC,OAAP,GAAiBJ,UAAjB","file":"writeFiles.js","sourcesContent":["/**\n * @author Dmitriy Bizyaev\n */\n\n'use strict';\n\nconst path = require('path');\nconst thenifyAll = require('thenify-all');\n\n/**\n *\n * @type {Array<string>}\n */\nconst fsFunctions = ['stat', 'mkdir', 'writeFile'];\n\n/**\n *\n * @param {Object} fs\n * @param {string} path\n * @return {Promise<boolean>}\n */\nconst isDirectory = async (fs, path) => {\n  const stats = await fs.stat(path);\n  return stats.isDirectory();\n};\n\n/**\n *\n * @param {Object} fs\n * @param {string} basePath\n * @param {Object<string, FSNode>} files\n * @return {Promise.<void>}\n */\nconst writeRecursive = async (fs, basePath, files) => {\n  const fileNames = Object.keys(files);\n\n  for (let i = 0; i < fileNames.length; i++) {\n    const fileName = fileNames[i];\n    const file = files[fileName];\n    const filePath = path.join(basePath, fileName);\n\n    if (file.type === 'dir') {\n      await fs.mkdir(filePath);\n      await writeRecursive(fs, filePath, file.content);\n    } else if (file.type === 'file') {\n      if (typeof file.content === 'string' || file.content instanceof Buffer) {\n        await fs.writeFile(filePath, file.content);\n      } else {\n        throw new Error(`writeFiles: dont know how to write ${filePath}`);\n      }\n    } else {\n      throw new Error(`writeFiles: unknown file type: ${file.type}`);\n    }\n  }\n};\n\n/**\n *\n * @param {Object<string, FSNode>} files\n * @param {string} outputDir\n * @param {Object} [fs=null]\n * @return {Promise<void>}\n */\nconst writeFiles = async (files, outputDir, fs = null) => {\n  fs = thenifyAll.withCallback(fs || require('fs'), {}, fsFunctions);\n\n  if (!await isDirectory(fs, outputDir)) {\n    throw new Error(`writeFiles: ${outputDir} is not a directory`);\n  }\n\n  await writeRecursive(fs, outputDir, files);\n};\n\nmodule.exports = writeFiles;\n"]}