{"version":3,"sources":["../lib/generateProject.js"],"names":["os","require","path","fs","archiver","thenify","rimraf","prettyMs","parseGraphQLSchema","installDependencies","getGraphQLSchema","buildModel","generateFiles","writeFiles","defaultContainerId","prettifyFiles","archiveProject","noop","dummyLogger","log","info","warn","error","generateProject","jssyProject","outputDir","version","urlPrefix","containerId","outputFs","clean","logger","startTime","Date","now","mkdir","meta","schema","graphQLEndpointURL","graphQLSchema","model","files","totalTime","module","exports"],"mappings":"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","file":"generateProject.js","sourcesContent":["/**\n * @author Dmitriy Bizyaev\n */\n\nconst os = require('os');\nconst path = require('path');\nconst fs = require('mz/fs');\nconst archiver = require('archiver');\nconst thenify = require('thenify');\nconst rimraf = thenify(require('rimraf'));\nconst prettyMs = require('pretty-ms');\nconst { parseGraphQLSchema } = require('@jssy/graphql-schema');\nconst installDependencies = require('./installDependencies');\n// const getMetadata = require('./getMetadata');\nconst getGraphQLSchema = require('./getGraphQLSchema');\nconst buildModel = require('./buildModel');\nconst generateFiles = require('./generateFiles');\nconst writeFiles = require('./writeFiles');\nconst { defaultContainerId } = require('./constants');\nconst prettifyFiles = require('./prettifyFiles');\nconst archiveProject = require('./archiveProject');\n\n/**\n *\n * @return {void}\n */\nconst noop = () => {};\n\n/**\n * @typedef {Object} Logger\n * @property {function(message: *)} log\n * @property {function(message: *)} info\n * @property {function(message: *)} warn\n * @property {function(message: *)} error\n */\n\n/**\n *\n * @type {Logger}\n */\nconst dummyLogger = {\n  log: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n};\n\n/**\n *\n * @param {Object} jssyProject\n * @param {string} outputDir\n * @param {string} [version]\n * @param {string} [urlPrefix]\n * @param {string} [containerId]\n * @param {?Object} [outputFs]\n * @param {boolean} [clean]\n * @param {Logger} [logger]\n * @return {Promise<void>}\n */\nconst generateProject = async (\n  jssyProject,\n  outputDir,\n  {\n    version = '1.0.0',\n    urlPrefix = '/',\n    containerId = defaultContainerId,\n    fs: outputFs = null,\n    clean = true,\n    logger = dummyLogger,\n  } = {}\n) => {\n  const startTime = Date.now();\n\n  // logger.log('Creating temporary directory');\n  // const tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'jssy-'));\n\n  // logger.log('Installing component libraries');\n  // const { componentLibs } = jssyProject;\n  // await installDependencies(componentLibs, tempDir);\n\n  await rimraf(outputDir);\n  await fs.mkdir(outputDir);\n\n  logger.log('Gathering metadata');\n  // TODO: fetch meta from server\n  // const meta = await getMetadata(componentLibs, tempDir);\n\n  const meta = require('../meta.json');\n\n  let schema = null;\n  if (jssyProject.graphQLEndpointURL) {\n    logger.log(\n      `Downloading GraphQL schema from ${jssyProject.graphQLEndpointURL}`\n    );\n\n    const graphQLSchema = await getGraphQLSchema(\n      jssyProject.graphQLEndpointURL\n    );\n\n    logger.log('Parsing GraphQL schema');\n    schema = parseGraphQLSchema(graphQLSchema);\n  }\n\n  logger.log('Building model');\n  const model = buildModel(jssyProject, meta, schema);\n\n  logger.log('Generating files');\n  const files = generateFiles(model, {\n    version,\n    urlPrefix,\n    containerId,\n  });\n\n  logger.log('Writing files');\n  await writeFiles(files, outputDir, outputFs);\n\n  // if (clean) {\n  //   logger.log('Removing temporary directory');\n  //   await rimraf(tempDir);\n  // }\n\n  // logger.log('Prettify files');\n  // await prettifyFiles();\n\n  logger.log('Building archive folder');\n  await archiveProject(outputDir);\n\n  const totalTime = Date.now() - startTime;\n  logger.log(`Done in ${prettyMs(totalTime)}`);\n};\n\nmodule.exports = generateProject;\n"]}