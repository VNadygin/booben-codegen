{"version":3,"sources":["../lib/buildModel.js"],"names":["require","forOwn","walkJssyValue","formatRouteComponentName","formatRouteIndexComponentName","Path","normalizeRoutes","parseComponentName","INVALID_ID","FileTypes","walkComponentsTree","components","rootId","visitor","visitComponent","component","children","forEach","childId","createFile","type","name","routeId","rootComponentId","importComponents","Map","handlers","refs","Set","activeStateSlots","routePaths","propsState","systemPropsState","importProjectFunctions","importBuiltinFunctions","needRouteParams","importHelpers","importFiles","usingReactRouter","nestedFiles","usingGraphQL","queries","mutations","css","auth","collectFileData","model","file","namespace","style","id","set","has","get","add","ROUTE","Error","route","routes","length","haveIndex","childRoute","fileName","emitFile","newFile","push","props","propValue","propName","StepTypes","COMPONENT_ID","value","SWITCH","COMPONENT_PROP_NAME","systemProps","buildModel","jssyProject","meta","schema","project","redirects","rootRoutes","map","functions","files","helpers","openUrl","graphQLEndpointURL","redirect","from","fullPath","to","redirectTo","redirectAuthenticated","redirectAuthenticatedTo","redirectAnonymous","redirectAnonymousTo","routeFile","indexFile","ROUTE_INDEX","indexComponentId","module","exports"],"mappings":"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","file":"buildModel.js","sourcesContent":["'use strict';\n\nconst { forOwn } = require('lodash');\nconst walkJssyValue = require('./walkJssyValue');\n\nconst {\n  formatRouteComponentName,\n  formatRouteIndexComponentName,\n} = require('./names');\n\nconst Path = require('./Path');\nconst { normalizeRoutes, parseComponentName } = require('./misc');\nconst { INVALID_ID, FileTypes } = require('./constants');\n\nconst walkComponentsTree = (components, rootId, visitor) => {\n  if (rootId === INVALID_ID) return;\n\n  const visitComponent = component => {\n    visitor(component);\n    component.children.forEach(childId => {\n      walkComponentsTree(components, childId, visitor);\n    });\n  };\n\n  visitComponent(components[rootId]);\n};\n\n/**\n * @typedef {Object} ComponentFileModel\n * @property {number} type\n * @property {string} name\n * @property {number} routeId\n * @property {Object<number, Object>} components\n * @property {number} rootComponentId\n * @property {Map<string, Set<string>>} importComponents\n * @property {Map<string, { path: Path, actions: Array<Object> }>} handlers\n * @property {Set<number>} refs\n * @property {Map<number, Set<string>>} activeStateSlots\n * @property {Map<number, Set<string>>} propsState\n * @property {Map<number, Set<string>>} systemPropsState\n * @property {Set<string>} importProjectFunctions\n * @property {Set<string>} importBuiltinFunctions\n * @property {boolean} needRouteParams\n * @property {Set<string>} importHelpers\n * @property {Set<string>} importFiles\n * @property {boolean} usingReactRouter\n * @property {Array<ComponentFileModel>} nestedFiles\n */\n\n/**\n *\n * @param {number} type\n * @param {string} name\n * @return {ComponentFileModel}\n */\nconst createFile = (type, name) => ({\n  type,\n  name,\n  routeId: INVALID_ID,\n  components: null,\n  rootComponentId: INVALID_ID,\n  importComponents: new Map(), // Map of namespace => Set of component names\n  handlers: new Map(), // Map of serialized path => array of actions\n  refs: new Set(), // Set of component ids\n  activeStateSlots: new Map(), // Map of component id => Set of state slot names\n  routePaths: new Map(), //Map of routes id => full route path\n  propsState: new Map(), // Map of component id => Set of prop names\n  systemPropsState: new Map(), // Map of component id => Set of prop names\n  importProjectFunctions: new Set(), // Set of function names\n  importBuiltinFunctions: new Set(), // Set of function names\n  needRouteParams: false,\n  importHelpers: new Set(), // Set of helper names\n  importFiles: new Set(), // Set of file names\n  usingReactRouter: false,\n  nestedFiles: [],\n  usingGraphQL: false,\n  queries: new Map(),\n  mutations: new Map(),\n  css: new Map(),\n  auth: null,\n});\n\n/**\n *\n * @param {Object} model\n * @param {ComponentFileModel} file\n * @param {Object<number, Object>} components\n * @param {number} rootComponentId\n * @return {void}\n */\nconst collectFileData = (model, file, components, rootComponentId) => {\n  file.components = components;\n  file.rootComponentId = rootComponentId;\n\n  walkComponentsTree(components, rootComponentId, component => {\n    const { namespace, name } = parseComponentName(component.name);\n    const { style, id } = component;\n\n    if (style) {\n      file.css.set(id, style);\n    }\n\n    if (namespace) {\n      if (!file.importComponents.has(namespace)) {\n        file.importComponents.set(namespace, new Set([name]));\n      } else {\n        file.importComponents.get(namespace).add(name);\n      }\n    } else {\n      if (name === 'Outlet') {\n        if (file.type !== FileTypes.ROUTE) {\n          throw new Error('Found Outlet in a non-route file');\n        }\n\n        const route = model.routes[file.routeId];\n        if (route.children.length > 0 || route.haveIndex) {\n          file.usingReactRouter = true;\n          route.children.forEach(childId => {\n            const childRoute = model.routes[childId];\n            const fileName = formatRouteComponentName(childRoute);\n            file.importFiles.add(fileName);\n          });\n\n          if (route.haveIndex) {\n            const fileName = formatRouteIndexComponentName(route);\n            file.importFiles.add(fileName);\n          }\n        }\n      }\n    }\n\n    const emitFile = (name, type, components, rootComponentId) => {\n      const newFile = createFile(type, name);\n      collectFileData(model, newFile, components, rootComponentId);\n      file.nestedFiles.push(newFile);\n    };\n\n    forOwn(component.props, (propValue, propName) => {\n      walkJssyValue(\n        propValue,\n        model,\n        file,\n        new Path([\n          { type: Path.StepTypes.COMPONENT_ID, value: component.id },\n          { type: Path.StepTypes.SWITCH, value: 'props' },\n          { type: Path.StepTypes.COMPONENT_PROP_NAME, value: propName },\n        ]),\n        emitFile\n      );\n    });\n\n    forOwn(component.systemProps, (propValue, propName) => {\n      walkJssyValue(\n        propValue,\n        model,\n        file,\n        new Path([\n          { type: Path.StepTypes.COMPONENT_ID, value: component.id },\n          { type: Path.StepTypes.SWITCH, value: 'systemProps' },\n          { type: Path.StepTypes.COMPONENT_PROP_NAME, value: propName },\n        ]),\n        emitFile\n      );\n    });\n  });\n};\n\n/**\n * @typedef {Object} JssyProjectModel\n * @property {Object} project\n * @property {Object<string, CodegenLibMetadata>} meta\n * @property {Object<number, Object>} routes\n * @property {Array<number>} rootRoutes\n * @property {Object<string, Object>} functions\n * @property {Array<ComponentFileModel>} files\n * @property {boolean} usingGraphQL\n */\n\n/**\n *\n * @param {Object} jssyProject\n * @param {Object<string, CodegenLibMetadata>} meta\n * @param {?DataSchema} schema\n * @return {JssyProjectModel}\n */\nconst buildModel = (jssyProject, meta, schema) => {\n  const model = {\n    project: jssyProject,\n    meta,\n    routes: normalizeRoutes(jssyProject.routes),\n    redirects: [],\n    rootRoutes: jssyProject.routes.map(route => route.id),\n    functions: jssyProject.functions,\n    files: [],\n    usingGraphQL: false,\n    schema,\n    helpers: {\n      openUrl: false,\n    },\n  };\n\n  if (model.project.graphQLEndpointURL) {\n    model.usingGraphQL = true;\n  }\n\n  forOwn(model.routes, route => {\n    if (route.redirect) {\n      model.redirects.push({\n        type: 'always',\n        from: route.fullPath,\n        to: route.redirectTo,\n      });\n    }\n\n    if (route.redirectAuthenticated) {\n      model.redirects.push({\n        type: 'hasAuth',\n        from: route.fullPath,\n        to: route.redirectAuthenticatedTo,\n      });\n    }\n\n    if (route.redirectAnonymous) {\n      model.redirects.push({\n        type: 'anonymous',\n        from: route.fullPath,\n        to: route.redirectAnonymousTo,\n      });\n    }\n\n    const routeFile = createFile(\n      FileTypes.ROUTE,\n      formatRouteComponentName(route)\n    );\n    routeFile.routeId = route.id;\n    collectFileData(model, routeFile, route.components, route.rootComponentId);\n    route.file = routeFile;\n\n    forOwn(model.routes, route => {\n      routeFile.routePaths.set(route.id, route.fullPath);\n    });\n\n    model.files.push(routeFile);\n\n    if (route.haveIndex) {\n      const indexFile = createFile(\n        FileTypes.ROUTE_INDEX,\n        formatRouteIndexComponentName(route)\n      );\n\n      indexFile.routeId = route.id;\n      collectFileData(\n        model,\n        indexFile,\n        route.components,\n        route.indexComponentId\n      );\n      route.indexFile = indexFile;\n      model.files.push(indexFile);\n    }\n  });\n\n  return model;\n};\n\nmodule.exports = buildModel;\n"]}