{"version":3,"sources":["../lib/generateFunctionsFile.js"],"names":["template","require","generate","default","t","generateFunctionsFile","functionDeclarations","Object","keys","functions","map","funcModel","key","argsLen","args","length","ARGS","arg","i","spreadLastArg","restElement","identifier","name","defaultValue","expression","body","sourceType","file","program","code","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,WAAWC,QAAQ,gBAAR,CAAjB;AACA,IAAMC,WAAWD,QAAQ,iBAAR,EAA2BE,OAA5C;AACA,IAAMC,IAAIH,QAAQ,aAAR,CAAV;;AAEA,IAAMI,wBAAwB,SAAxBA,qBAAwB,YAAa;AACzC,MAAMC,uBAAuBC,OAAOC,IAAP,CAAYC,SAAZ,EAAuBC,GAAvB,CAA2B,eAAO;AAC7D,QAAMC,YAAYF,UAAUG,GAAV,CAAlB;AACA,QAAMC,UAAUF,UAAUG,IAAV,CAAeC,MAA/B;AACA,QAAMC,OAAOL,UAAUG,IAAV,CAAeJ,GAAf,CAAmB,UAACO,GAAD,EAAMC,CAAN,EAAY;AAC1C,UAAIL,YAAYK,IAAI,CAAhB,IAAqBP,UAAUQ,aAAnC,EAAkD;AAChD,eAAOf,EAAEgB,WAAF,CAAchB,EAAEiB,UAAF,CAAaJ,IAAIK,IAAjB,CAAd,CAAP;AACD;;AAED,UAAI,OAAOL,IAAIM,YAAX,KAA4B,QAAhC,EAA0C;AACxC,eAAOvB,SAAYiB,IAAIK,IAAhB,YAA2BL,IAAIM,YAA/B,UAAkDC,UAAzD;AACD;;AAED,aAAOxB,SAAYiB,IAAIK,IAAhB,WAA0BL,IAAIM,YAA9B,IAAgDC,UAAvD;AACD,KAVY,CAAb;;AAYA,WAAOxB,wCAEeY,GAFf,4BAGCD,UAAUc,IAHX,0BAML,EAAEC,YAAY,QAAd,EANK,EAOL,EAAEV,UAAF,EAPK,CAAP;AAQD,GAvB4B,CAA7B;;AAyBA,MAAMW,OAAOvB,EAAEuB,IAAF,CAAOvB,EAAEwB,OAAF,CAAUtB,oBAAV,CAAP,CAAb;;AAEA,SAAOJ,SAASyB,IAAT,EAAeE,IAAtB;AACD,CA7BD;;AA+BAC,OAAOC,OAAP,GAAiB1B,qBAAjB","file":"generateFunctionsFile.js","sourcesContent":["'use strict';\n\nconst template = require('babel-template');\nconst generate = require('babel-generator').default;\nconst t = require('babel-types');\n\nconst generateFunctionsFile = functions => {\n  const functionDeclarations = Object.keys(functions).map(key => {\n    const funcModel = functions[key];\n    const argsLen = funcModel.args.length;\n    const ARGS = funcModel.args.map((arg, i) => {\n      if (argsLen === i + 1 && funcModel.spreadLastArg) {\n        return t.restElement(t.identifier(arg.name));\n      }\n\n      if (typeof arg.defaultValue === 'string') {\n        return template(`${arg.name} = \"${arg.defaultValue}\"`)().expression;\n      }\n\n      return template(`${arg.name} = ${arg.defaultValue}`)().expression;\n    });\n\n    return template(\n      `\n        export function ${key}(ARGS) {\n          ${funcModel.body}\n        }\n      `,\n      { sourceType: 'module' }\n    )({ ARGS });\n  });\n\n  const file = t.file(t.program(functionDeclarations));\n\n  return generate(file).code;\n};\n\nmodule.exports = generateFunctionsFile;\n"]}