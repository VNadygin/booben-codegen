{"version":3,"sources":["../lib/generateComponentFile.js"],"names":["generate","require","default","template","t","generateImportsAST","generateHandlerAST","generateStateAST","generateRefsAST","generateJSXAST","generateDataAST","generateLoadingJXSAST","declarationsTemplate","sourceType","plugins","generateComponentFile","file","model","nestingLevel","importASTs","handlersAST","handlerBindingsAST","handlers","forEach","handler","handlerAST","handlerBindingAST","push","stateAST","initRefASTs","saveRefASTs","bindSaveRefASTs","jsxAST","dataAST","exportExpression","queries","size","mutations","callExpression","identifier","name","loadingJXSAST","declarations","IMPORTS","COMPONENT_NAME","COMPONENT_NAME_STRING","stringLiteral","STATE","INIT_REFS","BIND_SAVE_REFS","BIND_HANDLERS","JSX","DATA","EXPORT_EXPRESSION","LOADING_JSX","classDeclaration","i","length","isClassDeclaration","body","splice","fileAST","program","code","module","exports"],"mappings":"AAAA;;;;AAEA,IAAMA,WAAWC,QAAQ,iBAAR,EAA2BC,OAA5C;AACA,IAAMC,WAAWF,QAAQ,gBAAR,CAAjB;AACA,IAAMG,IAAIH,QAAQ,aAAR,CAAV;AACA,IAAMI,qBAAqBJ,QAAQ,sBAAR,CAA3B;AACA,IAAMK,qBAAqBL,QAAQ,sBAAR,CAA3B;AACA,IAAMM,mBAAmBN,QAAQ,oBAAR,CAAzB;AACA,IAAMO,kBAAkBP,QAAQ,mBAAR,CAAxB;AACA,IAAMQ,iBAAiBR,QAAQ,kBAAR,CAAvB;AACA,IAAMS,kBAAkBT,QAAQ,mBAAR,CAAxB;AACA,IAAMU,wBAAwBV,QAAQ,yBAAR,CAA9B;;AAEA,IAAMW,uBAAuBT,giBA2B3B;AACEU,cAAY,QADd;AAEEC,WAAS,CAAC,KAAD;AAFX,CA3B2B,CAA7B;;AAiCA;;;;;;;AAOA,IAAMC,wBAAwB,SAAxBA,qBAAwB,CAACC,IAAD,EAAOC,KAAP,EAAmC;AAAA,MAArBC,YAAqB,uEAAN,CAAM;;AAC/D,MAAMC,aAAad,mBAAmBW,IAAnB,EAAyBC,KAAzB,EAAgCC,YAAhC,CAAnB;AACA,MAAME,cAAc,EAApB;AACA,MAAMC,qBAAqB,EAA3B;;AAEAL,OAAKM,QAAL,CAAcC,OAAd,CAAsB,mBAAW;AAAA,8BACWjB,mBAAmBkB,OAAnB,EAA4BR,IAA5B,CADX;AAAA,QACvBS,UADuB,uBACvBA,UADuB;AAAA,QACXC,iBADW,uBACXA,iBADW;;AAE/B,QAAID,cAAcC,iBAAlB,EAAqC;AACnCN,kBAAYO,IAAZ,CAAiBF,UAAjB;AACAJ,yBAAmBM,IAAnB,CAAwBD,iBAAxB;AACD;AACF,GAND;;AAQA,MAAME,WAAWrB,iBAAiBS,IAAjB,EAAuBC,KAAvB,CAAjB;;AAb+D,yBAcTT,gBAAgBQ,IAAhB,CAdS;AAAA,MAcvDa,WAduD,oBAcvDA,WAduD;AAAA,MAc1CC,WAd0C,oBAc1CA,WAd0C;AAAA,MAc7BC,eAd6B,oBAc7BA,eAd6B;;AAe/D,MAAMC,SAASvB,eAAeO,IAAf,EAAqBC,KAArB,CAAf;AACA,MAAMgB,UAAUvB,gBAAgBM,IAAhB,EAAsBC,KAAtB,CAAhB;;AAEA,MAAMiB,mBACJlB,KAAKmB,OAAL,CAAaC,IAAb,GAAoB,CAApB,IAAyBpB,KAAKqB,SAAL,CAAeD,IAAf,GAAsB,CAA/C,GACIhC,EAAEkC,cAAF,CAAiBlC,EAAEmC,UAAF,CAAa,SAAb,CAAjB,EAA0C,CAACnC,EAAEmC,UAAF,CAAavB,KAAKwB,IAAlB,CAAD,CAA1C,CADJ,GAEIpC,EAAEmC,UAAF,CAAavB,KAAKwB,IAAlB,CAHN;;AAKA,MAAMC,gBAAgB9B,sBAAsBK,IAAtB,CAAtB;;AAEA,MAAM0B,eAAe9B,qBAAqB;AACxC+B,aAASxB,UAD+B;AAExCyB,oBAAgBxC,EAAEmC,UAAF,CAAavB,KAAKwB,IAAlB,CAFwB;AAGxCK,2BAAuBzC,EAAE0C,aAAF,CAAgB9B,KAAKwB,IAArB,CAHiB;AAIxCO,WAAOnB,YAAY,EAJqB;AAKxCoB,eAAWnB,WAL6B;AAMxCoB,oBAAgBlB,eANwB;AAOxCmB,mBAAe7B,kBAPyB;AAQxC8B,SAAKnB,MARmC;AASxCoB,UAAMnB,OATkC;AAUxCoB,uBAAmBnB,gBAVqB;AAWxCoB,iBAAab;AAX2B,GAArB,CAArB;;AAcA,MAAIc,mBAAmB,IAAvB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAId,aAAae,MAAjC,EAAyCD,GAAzC,EAA8C;AAC5C,QAAIpD,EAAEsD,kBAAF,CAAqBhB,aAAac,CAAb,CAArB,CAAJ,EAA2C;AACzCD,yBAAmBb,aAAac,CAAb,CAAnB;AACA;AACD;AACF;;AAED,MAAID,qBAAqB,IAAzB,EAA+B;AAAA;;AAC7B,8CAAiBI,IAAjB,CAAsBA,IAAtB,EAA2BC,MAA3B,+BAAkC,CAAlC,EAAqC,CAArC,4BAA2C9B,WAA3C,GAA2DV,WAA3D;AACD;;AAED,MAAMyC,UAAUzD,EAAEY,IAAF,CAAOZ,EAAE0D,OAAF,CAAUpB,YAAV,CAAP,CAAhB;;AAEA,SAAO1C,SAAS6D,OAAT,EAAkBE,IAAzB;AACD,CAtDD;;AAwDAC,OAAOC,OAAP,GAAiBlD,qBAAjB","file":"generateComponentFile.js","sourcesContent":["'use strict';\n\nconst generate = require('babel-generator').default;\nconst template = require('babel-template');\nconst t = require('babel-types');\nconst generateImportsAST = require('./generateImportsAST');\nconst generateHandlerAST = require('./generateHandlerAST');\nconst generateStateAST = require('./generateStateAST');\nconst generateRefsAST = require('./generateRefsAST');\nconst generateJSXAST = require('./generateJSXAST');\nconst generateDataAST = require('./generateDataAST');\nconst generateLoadingJXSAST = require('./generateLoadingJXSAST');\n\nconst declarationsTemplate = template(\n  `\n    IMPORTS\n    \n    class COMPONENT_NAME extends React.Component {\n      constructor(props, context) {\n        super(props, context);\n        STATE\n        INIT_REFS\n        BIND_SAVE_REFS\n        BIND_HANDLERS\n      }\n      \n      // Other methods will be inserted here manually after executing this template\n      \n      render() {\n        LOADING_JSX\n        return JSX;\n      }\n    }\n\n    DATA\n    \n    COMPONENT_NAME.displayName = COMPONENT_NAME_STRING;\n    \n    export default EXPORT_EXPRESSION;\n  `,\n  {\n    sourceType: 'module',\n    plugins: ['jsx'],\n  }\n);\n\n/**\n *\n * @param {ComponentFileModel} file\n * @param {JssyProjectModel} model\n * @param {number} [nestingLevel=0]\n * @return {string}\n */\nconst generateComponentFile = (file, model, nestingLevel = 0) => {\n  const importASTs = generateImportsAST(file, model, nestingLevel);\n  const handlersAST = [];\n  const handlerBindingsAST = [];\n\n  file.handlers.forEach(handler => {\n    const { handlerAST, handlerBindingAST } = generateHandlerAST(handler, file);\n    if (handlerAST && handlerBindingAST) {\n      handlersAST.push(handlerAST);\n      handlerBindingsAST.push(handlerBindingAST);\n    }\n  });\n\n  const stateAST = generateStateAST(file, model);\n  const { initRefASTs, saveRefASTs, bindSaveRefASTs } = generateRefsAST(file);\n  const jsxAST = generateJSXAST(file, model);\n  const dataAST = generateDataAST(file, model);\n\n  const exportExpression =\n    file.queries.size > 0 || file.mutations.size > 0\n      ? t.callExpression(t.identifier('enhance'), [t.identifier(file.name)])\n      : t.identifier(file.name);\n\n  const loadingJXSAST = generateLoadingJXSAST(file);\n\n  const declarations = declarationsTemplate({\n    IMPORTS: importASTs,\n    COMPONENT_NAME: t.identifier(file.name),\n    COMPONENT_NAME_STRING: t.stringLiteral(file.name),\n    STATE: stateAST || [],\n    INIT_REFS: initRefASTs,\n    BIND_SAVE_REFS: bindSaveRefASTs,\n    BIND_HANDLERS: handlerBindingsAST,\n    JSX: jsxAST,\n    DATA: dataAST,\n    EXPORT_EXPRESSION: exportExpression,\n    LOADING_JSX: loadingJXSAST,\n  });\n\n  let classDeclaration = null;\n  for (let i = 0; i < declarations.length; i++) {\n    if (t.isClassDeclaration(declarations[i])) {\n      classDeclaration = declarations[i];\n      break;\n    }\n  }\n\n  if (classDeclaration !== null) {\n    classDeclaration.body.body.splice(1, 0, ...saveRefASTs, ...handlersAST);\n  }\n\n  const fileAST = t.file(t.program(declarations));\n\n  return generate(fileAST).code;\n};\n\nmodule.exports = generateComponentFile;\n"]}