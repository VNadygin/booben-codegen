{"version":3,"sources":["../lib/generateDataAST.js"],"names":["t","require","_","template","formatQueryNamespace","formatMutationNamespace","queryArgsStringTemplate","args","length","queryArgsStringsArray","map","item","name","type","argsStringTemplate","argsStringsArray","generateVariablesAST","objectsAST","objectProperty","identifier","value","objectExpression","parseDeep","acc","isEmpty","Object","keys","key","generateDataAST","graphqlDataAST","file","queries","forEach","body","queryName","argsBody","queryArgsBody","variablesAst","queryBody","values","templateBody","queryAst","VARIABLES","push","expression","mutations","mutationName","mutationArgsBody","mutationBody","mutationAst","dataAst","GRAPHQL_AST","module","exports"],"mappings":"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","file":"generateDataAST.js","sourcesContent":["'use strict';\n\nconst t = require('babel-types');\nconst _ = require('lodash');\nconst template = require('babel-template');\nconst { formatQueryNamespace, formatMutationNamespace } = require('./names');\n\nconst queryArgsStringTemplate = args => {\n  if (args.length === 0) return '';\n  const queryArgsStringsArray = args.map(item => `$${item.name}:${item.type}`);\n  return `(${queryArgsStringsArray})`;\n};\n\nconst argsStringTemplate = args => {\n  if (args.length === 0) return '';\n  const argsStringsArray = args.map(item => `${item.name}:$${item.name}`);\n  return `(${argsStringsArray})`;\n};\n\nconst generateVariablesAST = args => {\n  const objectsAST = args.map(item =>\n    t.objectProperty(t.identifier(item.name), item.value)\n  );\n\n  return t.objectExpression(objectsAST);\n};\n\nconst parseDeep = (item, acc = '') => {\n  if (_.isEmpty(item)) return acc;\n  acc += '{';\n  acc += Object.keys(item).map(key => {\n    if (!_.isEmpty(item[key])) {\n      return key + parseDeep(item[key]);\n    } else {\n      return key;\n    }\n  });\n  acc += '}';\n\n  return acc;\n};\n\nconst generateDataAST = file => {\n  const graphqlDataAST = [];\n\n  file.queries.forEach((body, queryName) => {\n    const argsBody = argsStringTemplate(body.args);\n    const queryArgsBody = queryArgsStringTemplate(body.args);\n    const variablesAst = generateVariablesAST(body.args);\n\n    const queryBody = Object.keys(body.values).map(key => {\n      return parseDeep(body.values[key], key);\n    });\n\n    const templateBody =\n      'gql`' +\n      `query` +\n      queryArgsBody +\n      `{\n      ${queryName}` +\n      argsBody +\n      `{\n        ${queryBody}\n      }\n    }` +\n      '`';\n\n    const queryAst = template(`\n      graphql(${templateBody}, { name: '${formatQueryNamespace(\n      queryName\n    )}', options: (props) => ({variables: VARIABLES})})\n    `)({\n      VARIABLES: variablesAst,\n    });\n    graphqlDataAST.push(queryAst.expression);\n  });\n\n  file.mutations.forEach((body, mutationName) => {\n    const mutationArgsBody = queryArgsStringTemplate(body.args);\n    const argsBody = argsStringTemplate(body.args);\n    const mutationBody = body.values;\n\n    const templateBody =\n      'gql`' +\n      `mutation` +\n      mutationArgsBody +\n      `{\n      ${mutationName}` +\n      argsBody +\n      `{\n        ${mutationBody}\n      }\n    }` +\n      '`';\n\n    const mutationAst = template(`\n      graphql(${templateBody}, { name: '${formatMutationNamespace(\n      mutationName\n    )}'})\n    `)();\n\n    graphqlDataAST.push(mutationAst.expression);\n  });\n\n  const dataAst = template(`\n    const enhance = compose(\n      GRAPHQL_AST\n    )\n  `)({\n    GRAPHQL_AST: graphqlDataAST,\n  });\n  if (graphqlDataAST.length === 0) {\n    return [];\n  }\n  return dataAst;\n};\n\nmodule.exports = generateDataAST;\n"]}